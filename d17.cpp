#include<bits/stdc++.h>

using namespace std;

class node{

    public:
    int data;
    node* next;

    node(int val)
    {
        data=val;
        next=NULL;
    }
};

                  
void insert(node* &head,int val)
{  node* n=new node(val);
    if(head==NULL)
    {
        head=n;
        return;
    }
    node* temp=head;

    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
}

node* reversek(node* &head,int k)
{
    node* preptr=NULL;
    node* currptr=head;
    node* nextptr;
    
    int count=0;
    while(currptr!=NULL && k>count)
    {
        nextptr=currptr->next;
        currptr->next=preptr;

        preptr=currptr;
        currptr=nextptr;
        count++;
    } // first k nodes hogaye reverse
                                                                                                                                                                                                                                                              
    if(nextptr!=NULL)
    {
        head->next=reversek(nextptr,k);// idhar head ka next point karega remaining reversed l.l ke first node ko
    }

    return preptr;//pre ptr naya head ban gaya
}    
void display(node* head){
node* temp=head;

while (temp!=NULL)
{
    cout<<temp->data<<"->";
    temp=temp->next;
}
cout<<endl;

} 


int main()
{
   node* head=NULL;
   insert(head,1);
   insert(head,2);
   insert(head,3);
   insert(head,4);
   insert(head,5);
   insert(head,6);
   
   display(head);

  int k=2;
  node* newhead=reversek(head,k);
  display(newhead);

return 0;

}





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































